// trade.js (????? ??? â€” ?????????? TP/SL + ???? ???? modal)
let trades = [];
let balance = 10000;
let selectedTradeIndex = null; // ???? ???? ???? ???? ?????? ???

function openTrade(type) {
  const volume = parseFloat(document.getElementById("tradeVolume").value) || 0;
  const bid = parseFloat(document.getElementById("bid-" + selectedSymbol).textContent) || 0;
  const ask = parseFloat(document.getElementById("ask-" + selectedSymbol).textContent) || 0;
  const entry = type === "BUY" ? ask : bid;

  const commissionRate = config.commission / 100;
  const fee = entry * volume * commissionRate;
  balance -= fee; // ??????? ???? ?? ????

  trades.push({
    symbol: selectedSymbol,
    type,
    volume,
    entry,
    commission: fee.toFixed(2),
    tp: null,
    sl: null,
    pnl: 0
  });
  renderTrades();
}

function renderTrades() {
  const tbody = document.querySelector("#trades-table tbody");
  tbody.innerHTML = "";
  trades.forEach((t, i) => {
    const row = document.createElement("tr");
    row.innerHTML = `
      <td>${t.symbol}</td>
      <td>${t.type}</td>
      <td>${t.volume}</td>
      <td>${t.entry}</td>
      <td>
        ${t.tp !== null 
          ? `${t.tp} <button onclick="removeTP(${i})">?</button>` 
          : "-"}
      </td>
      <td>
        ${t.sl !== null 
          ? `${t.sl} <button onclick="removeSL(${i})">?</button>` 
          : "-"}
      </td>
      <td>${t.commission}</td>
      <td id="pnl-${i}">0</td>
      <td>
        <button onclick="openSettings(${i})">??</button>
        <button onclick="closeTrade(${i})">?</button>
      </td>
    `;
    tbody.appendChild(row);
  });
  updateBalance();
}

function closeTrade(i, reason = null) {
  const t = trades[i];
  const bid = parseFloat(document.getElementById("bid-" + t.symbol).textContent) || t.entry;
  const ask = parseFloat(document.getElementById("ask-" + t.symbol).textContent) || t.entry;
  const exitPrice = t.type === "BUY" ? bid : ask;

  // ??????? ????
  const commissionRate = config.commission / 100;
  const exitFee = exitPrice * t.volume * commissionRate;

  balance += (t.pnl - exitFee); // ???/??? ????? ??? ?? ??? ??????? ????

  // ????? ?????????? ??? ?? TP ?? SL ???? ??
  if (reason) {
    showNotification(`?????? ${t.symbol} (${t.type}) ?? ${reason} ???? ??.`, "info");
  }

  trades.splice(i, 1);
  renderTrades();
}

// ??? ???? TP
function removeTP(i) {
  trades[i].tp = null;
  renderTrades();
}

// ??? ???? SL
function removeSL(i) {
  trades[i].sl = null;
  renderTrades();
}

function updateBalance() {
  let unrealized = 0;
  // ????: ??? trade ???? ???? renderTrades() ?????? ???????? ?????? ? ??? ???? ?????? ???? ??????.
  trades.forEach((t, i) => {
    const bid = parseFloat(document.getElementById("bid-" + t.symbol).textContent) || t.entry;
    const ask = parseFloat(document.getElementById("ask-" + t.symbol).textContent) || t.entry;
    const price = t.type === "BUY" ? bid : ask;

    // ?????? PnL (??? ???? ?????)
    t.pnl = (t.type === "BUY" ? (price - t.entry) : (t.entry - price)) * t.volume;

    // ????? PnL
    const el = document.getElementById("pnl-" + i);
    if (el) el.textContent = t.pnl.toFixed(2);

    // ????? ????? ?? TP/SL
    if (t.tp !== null) {
      if ((t.type === "BUY" && price >= t.tp) || (t.type === "SELL" && price <= t.tp)) {
        closeTrade(i, "?? ??? (TP)");
        return;
      }
    }
    if (t.sl !== null) {
      if ((t.type === "BUY" && price <= t.sl) || (t.type === "SELL" && price >= t.sl)) {
        closeTrade(i, "?? ??? (SL)");
        return;
      }
    }

    unrealized += t.pnl;
  });

  // ?????? (??? ??? ?? ???? ?????? ????? ??????)
  document.getElementById("balance").textContent = balance.toFixed(2);

  // ??????? = ?????? + ???/??? ?????
  document.getElementById("equity").textContent = (balance + unrealized).toFixed(2);
  checkDrawdown(); // ? ????? ??? ??????

}

setInterval(updateBalance, 2000);

// ================= Modal ???? TP/SL =================

function openSettings(index) {
  selectedTradeIndex = index;
  // ??? ???? ?????? ????
  clearModalError();

  document.getElementById("tpInput").value = trades[index].tp != null ? trades[index].tp : "";
  document.getElementById("slInput").value = trades[index].sl != null ? trades[index].sl : "";
  document.getElementById("settingsModal").style.display = "flex";
}

function closeSettings() {
  document.getElementById("settingsModal").style.display = "none";
  selectedTradeIndex = null;
}

function saveSettings() {
  const tpRaw = document.getElementById("tpInput").value;
  const slRaw = document.getElementById("slInput").value;

  if (selectedTradeIndex === null) return;

  const trade = trades[selectedTradeIndex];

  // ????? ?? ??? ?? null
  const tpVal = tpRaw === "" ? null : parseFloat(tpRaw);
  const slVal = slRaw === "" ? null : parseFloat(slRaw);

  // ????? ????? ???? ?????
  if (tpVal !== null && isNaN(tpVal)) {
    setModalError("????? ?? ??? (TP) ????? ????.");
    return;
  }
  if (slVal !== null && isNaN(slVal)) {
    setModalError("????? ?? ??? (SL) ????? ????.");
    return;
  }

  // ?????????? ?? ???? ??? ??????
  if (trade.type === "BUY") {
    // TP ???? ?????? ?? entry? SL ???? ?????? ?? entry
    if (tpVal !== null && tpVal <= trade.entry) {
      setModalError("???? ?????? BUY? ?? ??? ???? ??????? ?? ???? ???? ????.");
      return;
    }
    if (slVal !== null && slVal >= trade.entry) {
      setModalError("???? ?????? BUY? ?? ??? ???? ??????? ?? ???? ???? ????.");
      return;
    }
    if (tpVal !== null && slVal !== null && !(slVal < trade.entry && trade.entry < tpVal)) {
      setModalError("???? BUY ????: SL < entry < TP ?????? ????.");
      return;
    }
  } else { // SELL
    // TP ???? ?????? ?? entry? SL ???? ?????? ?? entry
    if (tpVal !== null && tpVal >= trade.entry) {
      setModalError("???? ?????? SELL? ?? ??? ???? ??????? ?? ???? ???? ????.");
      return;
    }
    if (slVal !== null && slVal <= trade.entry) {
      setModalError("???? ?????? SELL? ?? ??? ???? ??????? ?? ???? ???? ????.");
      return;
    }
    if (tpVal !== null && slVal !== null && !(tpVal < trade.entry && trade.entry < slVal)) {
      setModalError("???? SELL ????: TP < entry < SL ?????? ????.");
      return;
    }
  }

  // ?? ???? ????? ????? ????? ??
  trade.tp = tpVal;
  trade.sl = slVal;

  clearModalError();
  closeSettings();
  renderTrades();
}

// ================= Modal error helpers =================
function setModalError(msg) {
  let modal = document.getElementById("settingsModal");
  if (!modal) return;
  let err = modal.querySelector("#settingsError");
  if (!err) {
    err = document.createElement("div");
    err.id = "settingsError";
    err.style.color = "red";
    err.style.marginTop = "8px";
    modal.querySelector(".modal-content")?.appendChild(err) || modal.appendChild(err);
  }
  err.textContent = msg;
}

function clearModalError() {
  const modal = document.getElementById("settingsModal");
  if (!modal) return;
  const err = modal.querySelector("#settingsError");
  if (err) err.remove();
}

// ================= ?????????? ???? =================
function showNotification(msg, type = "info") {
  const notif = document.createElement("div");
  notif.textContent = msg;
  notif.style.position = "fixed";
  notif.style.bottom = "20px";
  notif.style.right = "20px";
  notif.style.padding = "10px 15px";
  notif.style.borderRadius = "8px";
  notif.style.zIndex = "9999";
  notif.style.opacity = "0.95";
  // ???????? ?? ???? ???
  if (type === "error") {
    notif.style.background = "#b00020"; // ????
    notif.style.color = "#fff";
  } else {
    notif.style.background = "#333"; // ??????? ????
    notif.style.color = "#fff";
  }

  document.body.appendChild(notif);

  setTimeout(() => {
    notif.remove();
  }, 4000);
}

// ===== ?????????? ??? ?????? =====
let peakBalanceAllTime = balance;   // ???????? ?????? ??
let peakBalanceToday = balance;     // ???????? ?????? ?????
let todayDate = new Date().toDateString(); // ???? ???? ??????

function checkDrawdown() {
  const equity = balance + trades.reduce((acc, t) => acc + t.pnl, 0);

  // ???? ??????
  const nowDate = new Date().toDateString();
  if (nowDate !== todayDate) {
    todayDate = nowDate;
    peakBalanceToday = equity; // ???? ??? ??????
  }

  // ?????? ???? ??????
  if (equity > peakBalanceAllTime) peakBalanceAllTime = equity;
  if (equity > peakBalanceToday) peakBalanceToday = equity;

  // ?????? ??????
  const dailyDD = ((peakBalanceToday - equity) / peakBalanceToday) * 100;
  const totalDD = ((peakBalanceAllTime - equity) / peakBalanceAllTime) * 100;

  // ??? ?? ?? ???? ????? ?? ? ??? ??????? ???? ????
  if (dailyDD >= config.dailyDD) {
    trades = [];
    showNotification("? ?????? ??? ?????? ????! ??? ??????? ???? ????.");
    renderTrades();
  } else if (totalDD >= config.totalDD) {
    trades = [];
    showNotification("? ?????? ??? ??? ????! ??? ??????? ???? ????.");
    renderTrades();
  }
}

